#!/usr/bin/python
################################################################################
# This file is part of ATOM
# Copyright (c) 2017 by Yifei Zheng
# Unauthorized copy, distribution and modification of this file is prohibited.
#
# This is the front-end of ATOM compiler that generates bytecode from source code.
################################################################################

import codegen.visitor
import sys
import argparse
import os
import io

ap = argparse.ArgumentParser(description='SAP Compiler')
ap.add_argument('file')
ap.add_argument('-I', metavar='dir', action='append', help='add include path')
ap.add_argument('-o', metavar='filename', help='output to')
ap.add_argument('-unit', metavar='UnitSys', default='SI')
ap.add_argument('--last-only', action='store_true')

nmspace = ap.parse_args()
filename = nmspace.file
paths = nmspace.I if nmspace.I else ['.']
output = nmspace.o if nmspace.o else None


def printError(string):
    print("\033[91m\033[1m" + string + "\033[0m")


def include(f, w):
    for lineno, line in enumerate(f):
        if line.startswith('using'):
            includename = line[5:].strip()
            try:
                path = next(path for path in paths if os.path.isfile(path + '/' + includename))
            except StopIteration:
                printError(f"Error: Can't find '{includename}' in specified directoies")
                print(', '.join(paths))
                exit(1)
            with open(includename) as i:
                w.write(f"# INCLUDED FROM {f.name}({lineno})::{includename}\n")
                include(i, w)
                w.write("# INCLUDE END\n")
        else:
            w.write(line)


# FIXME: Use StringIO instead of temp files
with open(filename) as f, open('/tmp/sap.pp', 'w') as w:
    include(f, w)

try:
    src = parser.visitor.processSrc('/tmp/sap.pp')
    codeStream = src.write()
except IndentationError as IE:
    printError(IE)
finally:
    os.remove('/tmp/sap.pp')

with open(output, 'w') if output else sys.stdout as f:
    f.writelines([';THIS IS PRELIMINARY BYTECODE GENERATED BY CSF COMPILER\n',
                  ';THIS FILE IS NOT EXECUTABLE\n'])
    f.writelines(codeStream)
